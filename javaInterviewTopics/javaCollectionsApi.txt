
—-Create Spring array;

String word[] = {“Ram”, “VT”};
String[] word = {“VT”};



1) Sort the array ( int )

Arrays.sort(a);

2) sort the array in reverse order
 Arrays.sort(a,Comperator.reverseOrder());

3) Convert the array (int) to List<Integer>
Arrays.sort(a).boxed().collect(Collectors.toList());

4) Convert List <Integer> to array
list.stream().mapToInt(I ->I).toArray();

5) sum/avg/max/min is part of IntStream so if object class is there we need to convert in rspective primitive class

int[] a = new int[];

Arrays.stream(a).sum();
lsit.stream.mapToInt( I -I).sum()/max()/min();



2) Stream on array
Arrays.stream(a);


Binary search

Arrays.binarySearch(a, key) & has many flavours for start to end
Collections.binarySearch()



3) LOOP
Instream.range/rangeClosed(0,count).forEach( consumer<T>);

4) flatmap
List1<Integer>
List2<Integer>

List.stream().map (I -> list.stream().map(j -> new int[]{I,j})
Creating 2D array from flat list

Usecase2:
List<List<inteegr>

L.stream().map(I-> I.stream()).collect(Collectors.toLsit());









Comparable	Comparator¯
1) Comparable provides a single sorting sequence. In other words, we can sort the collection on the basis of a single element such as id, name, and price.
The Comparator provides multiple sorting sequences. In other words, we can sort the collection on the basis of multiple elements such as id, name, and price etc.


2) Comparable affects the original class, i.e., the actual class is modified.
Comparator doesn't affect the original class, i.e., the actual class is not modified.

3) Comparable provides compareTo() method to sort elements.
Comparator provides compare() method to sort elements.

4) Comparable is present in java.lang package.
A Comparator is present in the java.util package.

Stundet implement comparable<Student>

public int toCompare(Student st )
{

this.age == st.age
0
this.age > st.age
1

this.age < st.age
-1

}

collection.sort(list<Student>);


MyAgeCOmperator implements comperator<Student>
{

public int compre(Student s1,Stndet s2)

s1.age == s2.age
0
s1.age > s2.age
1

s1.age < s2.age
-1

}
collection.sort( list<Student>,MyAgeCOmperator);


Question: MorganStanley

List<List<Employee>> --> Map<String,List<Employee>> using streams

lsit.stream().flatMap(l -> l.stream()).collect(Collectors.partitionby(Employee::getDepartment

2) String s = "k1-1,k2-1,k3-2"
Map<String.INteger> using stream



Collectors API

		joining( char delimiter , prefix, suffix ) // multiple override

		.collect ( toList()
		.collect(Collectors.toCollection(TreeSet::new)

		.collect(Collectors.joining(“, “);

		.collect(Collectors.summingint(Employe::getSalary);

		groupingBy(Employe:department)
		groupingby(Employe::getDepartment, Collectors.summingInt(Employe::getSalary));

		//Partition students into passing and failing
		Map<Boolean, List<Student> map = collect( partitioningBy(s-> s.getGrade > 2 ( predicate )) we can give collectors downstream as well to map data accordingly rather than taking whole object

		collect(partitioningBy(s-> predicate , mapping())
		Map<Boolean , Map<>> map = collect(partioningBy(s-> predicate , groupingBy()


		reduce ( identity , mapper , operator )

		mapper will be jus two modify the input if needed and then operator will be applied to all the input element passed .

#Java 18 Features:
- UTF-8 by Default
- Simple Web Server
- Code Snippets in Java API Doc
- Reimplement Core Reflection with Method Handles
- Vector API
- Internet-Address Resolution SPI
- Foreign Function & Memory API
- Pattern Matching for switch

#Java 17 Features (Long Term Support) :
- Restore Always-Strict Floating-Point Semantics
- Enhanced Pseudo-Random Number Generators
- New macOS Rendering Pipeline
- macOS/AArch64 Port
- Deprecate the Applet API for Removal
- Strongly Encapsulate JDK Internals
- Pattern Matching for switch

#Java 16 Features:
- Vector API
- Enable C++14 Language Features
- Migrate from Mercurial to Git
- Migrate to GitHub
- Concurrent Thread-Stack Processing
- Unix-Domain Socket Channels
- Alpine Linux Port
- Elastic Metaspace
- Windows/AArch64 Port

#Java 15 Features
- Sealed Classes and Interfaces
- EdDSA Algorithm
- Hidden Classes
- Pattern Matching for instanceof
- Removed Nashorn JavaScript Engine
- Reimplement the Legacy DatagramSocket API
- Records (Second Preview)
- Text Blocks become a standard feature

#Java 14 Features
– Pattern Matching for instanceof
– Text Blocks
– Helpful NullPointerExceptions
– Records
– Switch Expressions
– Packaging Tool
– NUMA-Aware Memory Allocation for G1
– JFR Event Streaming
– Non-Volatile Mapped Byte Buffers
– Remove the Pack200 Tools and API

#Java 13 Features:
– Text Blocks (Preview)
– Switch Expressions Enhancements (Preview)
– Reimplement the Legacy Socket API
– Dynamic CDS Archive
– ZGC: Uncommit Unused Memory
– FileSystems.newFileSystem() Method
– DOM and SAX Factories with Namespace Support

#Java 12 Features:
- Collectors.teeing() in Stream API
- String API Changes
- Files.mismatch(Path, Path)
- Compact Number Formatting
- Support for Unicode 11
- Switch Expressions (Preview)

#Java 11 Features (Long Term Support):
- HTTP Client API
- Launch Single-File Programs Without Compilation
- String API Changes
- Collection.toArray(IntFunction)
- Files.readString() and Files.writeString()
- Optional.isEmpty()

#Java 10 Features:
- Local Variable Type Inference
- Time-Based Release Versioning
- Garbage-Collector Interface
- Parallel Full GC for G1
- Heap Allocation on Alternative Memory Devices
- Consolidate the JDK Forest into a Single Repository

#Java 9 Features:
- Java platform module system
- Interface Private Methods
- HTTP 2 Client
- JShell
- Platform and JVM Logging
- Process API Updates
- Collection API Updates
- Improvements in Stream API
- Multi-release JAR Files
- @Deprecated Tag Changes
- Stack Walking

#Java 8 Features (Long Term Support):
- Lambda expression
- Stream API
- Functional interface
- Default and static methods
- Optional class
- Nashorn – JavaScript runtime engine
- Unsigned Integer Arithmetic
- Repeating annotations
- New Date and Time API
