{\rtf1\ansi\ansicpg1252\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red25\green28\blue31;}
{\*\expandedcolortbl;;\cssrgb\c12941\c14510\c16078;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid1\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\paperw11900\paperh16840\margl1440\margr1440\vieww36020\viewh17380\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs36 \cf0 Spring Microservices\
\
\
\'97how to make image process fast\
\'97how to write optimized dockefile\
\'97eureka eviction params\
\'97check health of container \
\'97secrets in spring cloud config  ( DONE )\
\'97connectivity between 2 microservices through rest templete  (DONE )\
--checked through service via docker compose ( how to create services through  dcker command) did not worked\
\'97how depends on & links works & fix it \{DONE)\
\'97how to make sure process under container is started & healthy\
\
\
\
1) service dicovery means & internal details & propertis\
2) API Gateway \
3) cloud  config server & internals \
4) dynamic refresh @Refreshed scope\
5) Resilience patterns in micrro service ( microservice api patterns )\
circuit breaker\
rate limited\
retur\
bulkhead \
\
\
Spring Security:\
\
https://www.marcobehler.com/guides/spring-security\
\
\
As soon as you added spring security starter basic authentication will start appearing when client hit the \
http url with only user as user & system generated password when we started our server..\
And http auth dialog box will start coming for user/passwd \
\
\
\
So above step will add security to your apps\
All http request path will require authentication\
No specific roles/authoritites is required\
No login page\
Authentication is prompted with http basic authentication\
There is only 1 username , \'93user\'94\
\
And now when you do @EnableWebSecurity on newly created class which extends WebSecurityConfgureAdaptor & start hit the http url it will show security login page\
\
Now spring security offers you to setup user store for auth.\
1) In memory\
2) jdbc based\
LDAP-based\
Customer based\
\
When u extend WebSecurityConfigurerAdaptor it will ask you to override authenticate method whichh has argument AuthenticationManager Builder ( builder patter) \
And that will help in setting up user store\
\
Auth.inmemory().withUser().password().autheritites() & so on //In memory\
Auth.jdbcAuthnetication().dataSruce(ds) ( it expect tables like users , authorities, group,group_members,group_authorities\
\
& for password secrecy we have passwordEncoder()\
\
LDAP () Lightweight director access protocol  setup is also possible with local ldap server loaded from ldap files or can access remote ldap server when provided url using context() in authbuilder\
\
\
\
We have seen spring Databased authentication using jdbc\'85\
\
Not we can leverage spring Jpa \
\
We can create user class extending userDetails from spring security & a repository & service which will call reporters to load user name & related data\
And we can configure this userDertailde service in auth builder for user auth \
\
userDetail methods :\
Which has methods : getAuthorities() [return collection f  authritites provided tourer ] / isAccountNonExpired / isAccountNonLocked) / isCredentilsNonExpired . isEnabled \
\
\
To configure security rules we have another method from WebSecurityConfigurereAdaptor \'85confiure( HttpSecurity http)\
\
-certain condition to be met before allowing request to be served\
\
Intersepting request to ensure the user has proper authority is main thing u will configure it with http\
\
Eg:\
\
confgiure( http)\
\{\
http.authorizeRequest().anyMatchers(\'93/design\'94,\'94/order\'94).hasRole(ROLE_USER)\
.antMatcher(\'93/\'93,\'94/**).permitAll() \} precedents is import & first will be at propriety\
\
allow access to  users \
Other methods : access(Spel String true) , anonymous , authenticated () denyAll() fullyAuthenticated hasAnyAuthority\
hasAnyROle has Authority (String ) hasRole() , not, rememberme() , permitaALL()\
\
How you will get to know user\'85\
\
Inject a principal object directly from caller \
Inject authentication Object. ( authentication.getprinicpal )\
securityContext holder to get security context & get authenction object from it \
Use @AuthenticationPrinicpal. User user in method it will auto wired from security context ) \
\
Spring Security is bunch of servlet filters & it work in chaining operations\
\
\pard\pardeftab720\sa320\partightenfactor0

\f1\fs38\fsmilli19360 \cf2 \expnd0\expndtw0\kerning0
For example, an incoming HTTP request would\'85\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa320\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	1	}\expnd0\expndtw0\kerning0
First, go through a LoginMethodFilter\'85 \
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	2	}\expnd0\expndtw0\kerning0
Then, go through an AuthenticationFilter\'85 \
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	3	}\expnd0\expndtw0\kerning0
Then, go through an AuthorizationFilter\'85 \
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	4	}\expnd0\expndtw0\kerning0
Finally, hit your servlet.
\f0\fs36 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\sa320\partightenfactor0

\f1\fs38\fsmilli19360 \cf2 \expnd0\expndtw0\kerning0
By overriding the adapter\'92s configure(HttpSecurity) method, you get a nice little DSL with which you can configure your FilterChain.
\f0\fs36 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\
\
}